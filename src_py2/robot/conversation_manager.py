# -*- coding: utf-8 -*-
from __future__ import absolute_import, print_function
from src_py2.robot.nao_robot import NAORobot

import random
import re
import time
import unittest

#td strip quotation marks

class ConversationManager(object):

    def __init__(self, robot):
        self.robot = robot
        self.set_duration_variables()
        self.set_joint_variables()
        self.set_gesture_tags()
        # Constants
        self.LEADING_JUNK = re.compile(r'^[^A-Za-z0-9]+')

    def set_duration_variables(self):        
        # durations
        #self.character_duration = 0.075
        self.short_pause_duration = 0.05
        self.long_pause_duration = 0.1
        self.short_weight = 0.15
        self.long_weight = 0.2

        self.gest_duration_arm = 1.2
        self.gest_duration_hand = 0.8
        self.gest_duration_head = 0.5
        self.sleep_duration = 0.2 

    def set_joint_variables(self):

        # sets of joints
        self.joints_arms =[
                                    'LShoulderPitch', 'LShoulderRoll', 'LElbowYaw', 'LElbowRoll', 
                                    'RShoulderPitch', 'RShoulderRoll', 'RElbowYaw', 'RElbowRoll'
                            ]
        self.joints_rhand = ['RWristYaw', 'RHand']
        self.joints_lhand = ['LWristYaw', 'LHand']
        self.joints_head = ['HeadYaw', 'HeadPitch']
        self.joints_headarms = [
                                        'HeadYaw', 'HeadPitch', 
                                        'LShoulderPitch', 'LShoulderRoll', 'LElbowYaw', 'LElbowRoll', 
                                        'RShoulderPitch', 'RShoulderRoll', 'RElbowYaw', 'RElbowRoll'                                    
                                      ]

        self.joints_headarmshands = [
                                        'HeadYaw', 'HeadPitch', 
                                        'LShoulderPitch', 'LShoulderRoll', 'LElbowYaw', 'LElbowRoll', 
                                        'LWristYaw', 'LHand', 
                                        'RShoulderPitch', 'RShoulderRoll', 
                                        'RElbowYaw', 'RElbowRoll', 'RWristYaw', 'RHand'
                                        ]
               
                                
        self.joints_dict = {
                'facepalm': self.joints_headarmshands, 
                'look upward': self.joints_headarmshands,               
                'nod yes': ['HeadPitch'],
                'point down': self.joints_headarmshands,
                'point forward': self.joints_headarmshands,                
                'point to self': self.joints_headarmshands,
                'point up': self.joints_headarmshands,
                'pump fist': self.joints_headarmshands,  
                'scratch head': self.joints_headarmshands,               
                'shake fist': self.joints_headarmshands,
                'shake head no': ['HeadYaw'],
                'shrug': self.joints_headarmshands,
                'spread arms': self.joints_headarmshands,
                'turn head away': self.joints_headarmshands,                 
                'wave hand': self.joints_headarmshands,
            }
        
        # sets of angles
        self.angles_other_hand = [[0], [0.4]]         
        self.angles_dict = {
                        'left_out': [[angle] for  _, angle in [['LShoulderPitch', 0.9556400775909424], ['LShoulderRoll', 0.45095396041870117], ['LElbowYaw', -2.074009895324707], ['LElbowRoll', -1.178070068359375], ['RShoulderPitch', 0.9357819557189941], ['RShoulderRoll', -0.2945699691772461], ['RElbowYaw', 0.4524879455566406], ['RElbowRoll', 1.1674160957336426]]],
                        'left_up': [[angle] for  _, angle in [['LShoulderPitch', 0.8129780292510986], ['LShoulderRoll', 0.14108610153198242], ['LElbowYaw', -1.4420018196105957], ['LElbowRoll', -1.3222661018371582], ['RShoulderPitch', 0.9342479705810547], ['RShoulderRoll', -0.29610395431518555], ['RElbowYaw', 0.4524879455566406], ['RElbowRoll', 1.1612801551818848]]],
                        'left_over': [[angle] for  _, angle in [['LShoulderPitch', 0.760822057723999], ['LShoulderRoll', -0.0061779022216796875], ['LElbowYaw', -0.6121079921722412], ['LElbowRoll', -1.2056820392608643], ['RShoulderPitch', 0.9357819557189941], ['RShoulderRoll', -0.29917192459106445], ['RElbowYaw', 0.4540219306945801], ['RElbowRoll', 1.1873579025268555]]],
                        'facepalm': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.31442809104919434, 0.31442809104919434, 0.11194014549255371]], ['HeadPitch', [0.477031946182251, 0.477031946182251, 0.2469320297241211]], ['LShoulderPitch', [0.3420400619506836, 0.3420400619506836, 0.9172899723052979]], ['LShoulderRoll', [-0.14117002487182617, -0.1503739356994629, 0.23926210403442383]], ['LElbowYaw', [-0.8667521476745605, -0.8667521476745605, -0.44950389862060547]], ['LElbowRoll', [-1.556968092918396, -1.556968092918396, -1.1458560228347778]], ['LWristYaw', [-0.7701098918914795, -0.7655079364776611, -0.3099100589752197]], ['LHand', [0.7580000162124634, 0.7580000162124634, 0.7580000162124634]], ['RShoulderPitch', [0.9173741340637207, 0.9158401489257812, 0.9127721786499023]], ['RShoulderRoll', [-0.27002596855163574, -0.27002596855163574, -0.25315189361572266]], ['RElbowYaw', [0.4724299907684326, 0.4724299907684326, 0.46169209480285645]], ['RElbowRoll', [1.1213960647583008, 1.1213960647583008, 1.115260124206543]], ['RWristYaw', [1.3360720872879028, 1.3360720872879028, 0.6503739356994629]], ['RHand', [0.7195999622344971, 0.7195999622344971, 0.7195999622344971]]]],
                        'look upward': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.03217196464538574, 0.0060939788818359375, 0.05058002471923828]], ['HeadPitch', [-0.44643592834472656, -0.48938798904418945, 0.25766992568969727]], ['LShoulderPitch', [0.9402999877929688, 0.9387660026550293, 0.9402999877929688]], ['LShoulderRoll', [0.2822141647338867, 0.2668740749359131, 0.27147603034973145]], ['LElbowYaw', [-0.4771158695220947, -0.48785400390625, -0.4847860336303711]], ['LElbowRoll', [-1.1458560228347778, -1.1397199630737305, -1.1289820671081543]], ['LWristYaw', [0.15335798263549805, 0.16256213188171387, 0.1548919677734375]], ['LHand', [0.38120001554489136, 0.38120001554489136, 0.38120001554489136]], ['RShoulderPitch', [1.0799779891967773, 1.0799779891967773, 1.0799779891967773]], ['RShoulderRoll', [-0.447969913482666, -0.4510378837585449, -0.4510378837585449]], ['RElbowYaw', [0.6012859344482422, 0.6012859344482422, 0.6012859344482422]], ['RElbowRoll', [1.4174580574035645, 1.435865879058838, 1.4143900871276855]], ['RWristYaw', [0.24233007431030273, 0.2438640594482422, 0.2438640594482422]], ['RHand', [0.3083999752998352, 0.3083999752998352, 0.3083999752998352]]]],
                        'nod yes': [[0.7, -0.1]],
                        'point down':[angles_compressed for _, angles_compressed in [['HeadYaw', [0.09966802597045898, 0.09966802597045898, 0.13648414611816406]], ['HeadPitch', [0.5828781127929688, 0.5828781127929688, 0.20551395416259766]], ['LShoulderPitch', [0.46476006507873535, 0.4632260799407959, 0.7577540874481201]], ['LShoulderRoll', [-0.19485998153686523, -0.19025802612304688, 0.19170808792114258]], ['LElbowYaw', [0.8743381500244141, 0.8743381500244141, -0.1764519214630127]], ['LElbowRoll', [-0.47396397590637207, -0.47396397590637207, -0.9126880168914795]], ['LWristYaw', [-1.8546481132507324, -1.853114128112793, -1.172018051147461]], ['LHand', [0.7663999795913696, 0.7663999795913696, 0.7663999795913696]], ['RShoulderPitch', [0.9143061637878418, 0.9143061637878418, 0.9296460151672363]], ['RShoulderRoll', [-0.23627805709838867, -0.23627805709838867, -0.27922987937927246]], ['RElbowYaw', [0.5061781406402588, 0.5061781406402588, 0.48470211029052734]], ['RElbowRoll', [1.0769100189208984, 1.0769100189208984, 1.145939826965332]], ['RWristYaw', [0.11961007118225098, 0.11961007118225098, 0.12114405632019043]], ['RHand', [0.4611999988555908, 0.4611999988555908, 0.4611999988555908]]]] ,
                        'point forward': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.11347413063049316, 0.11194014549255371, 0.11347413063049316]], ['HeadPitch', [0.0858621597290039, 0.08739614486694336, 0.0858621597290039]], ['LShoulderPitch', [0.21471810340881348, 0.21471810340881348, 0.9955241680145264]], ['LShoulderRoll', [-0.08748006820678711, -0.09514999389648438, 0.34664201736450195]], ['LElbowYaw', [-1.0400938987731934, -1.0400938987731934, -0.5216019153594971]], ['LElbowRoll', [-0.01683211326599121, -0.01683211326599121, -1.2563040256500244]], ['LWristYaw', [-0.955723762512207, -0.9480538368225098, -0.22707390785217285]], ['LHand', [0.6891999840736389, 0.6891999840736389, 0.6891999840736389]], ['RShoulderPitch', [0.9357819557189941, 0.9357819557189941, 0.9373159408569336]], ['RShoulderRoll', [-0.31297802925109863, -0.31297802925109863, -0.31297802925109863]], ['RElbowYaw', [0.4954400062561035, 0.4954400062561035, 0.4954400062561035]], ['RElbowRoll', [1.199629783630371, 1.1980957984924316, 1.185823917388916]], ['RWristYaw', [0.02143406867980957, 0.02143406867980957, 0.02143406867980957]], ['RHand', [0.30400002002716064, 0.30400002002716064, 0.30400002002716064]]]],
                        'point to self': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.21011614799499512, 0.21011614799499512, 0.21165013313293457, 0.21011614799499512]], ['HeadPitch', [0.21165013313293457, 0.21165013313293457, 0.21165013313293457, 0.21165013313293457]], ['LShoulderPitch', [0.7362780570983887, 0.7362780570983887, 0.7362780570983887, 0.9571740627288818]], ['LShoulderRoll', [0.06898808479309082, 0.07205605506896973, 0.07512402534484863, 0.34050607681274414]], ['LElbowYaw', [-0.38814401626586914, -0.38814401626586914, -0.38814401626586914, -0.4740478992462158]], ['LElbowRoll', [-1.560036063194275, -1.560036063194275, -1.560036063194275, -1.2424980401992798]], ['LWristYaw', [-1.3699040412902832, -1.3699040412902832, -1.3714380264282227, -0.9204421043395996]], ['LHand', [0.38520002365112305, 0.38520002365112305, 0.38520002365112305, 0.38520002365112305]], ['RShoulderPitch', [1.112192153930664, 1.1137261390686035, 1.1137261390686035, 1.112192153930664]], ['RShoulderRoll', [-0.4786500930786133, -0.4786500930786133, -0.4786500930786133, -0.4786500930786133]], ['RElbowYaw', [0.6212279796600342, 0.6212279796600342, 0.6212279796600342, 0.6212279796600342]], ['RElbowRoll', [1.4389338493347168, 1.4389338493347168, 1.4389338493347168, 1.446603775024414]], ['RWristYaw', [0.891211986541748, 0.891211986541748, 0.891211986541748, 0.891211986541748]], ['RHand', [0.30879998207092285, 0.30879998207092285, 0.30879998207092285, 0.30879998207092285]]]],
                        'point up': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.3313021659851074, 0.3313021659851074, 0.14108610153198242]], ['HeadPitch', [-0.3958139419555664, -0.39734792709350586, 0.1518239974975586]], ['LShoulderPitch', [-1.0078802108764648, -1.0078802108764648, 0.877406120300293]], ['LShoulderRoll', [0.2239220142364502, 0.22852396965026855, 0.09813404083251953]], ['LElbowYaw', [-1.1167941093444824, -1.1167941093444824, -0.5768260955810547]], ['LElbowRoll', [-0.5491299629211426, -0.5491299629211426, -0.8221821784973145]], ['LWristYaw', [-0.4218919277191162, -0.4218919277191162, -0.06447005271911621]], ['LHand', [0.6763999462127686, 0.6763999462127686, 0.6763999462127686]], ['RShoulderPitch', [1.0799779891967773, 1.0799779891967773, 1.061570167541504]], ['RShoulderRoll', [-0.44950389862060547, -0.44950389862060547, -0.4295620918273926]], ['RElbowYaw', [0.6028201580047607, 0.6028201580047607, 0.5844120979309082]], ['RElbowRoll', [1.3944478034973145, 1.3944478034973145, 1.3852438926696777]], ['RWristYaw', [1.742582082748413, 1.742582082748413, 0.9801840782165527]], ['RHand', [0.5680000185966492, 0.5680000185966492, 0.5676000118255615]]]],
                        'pump fist': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.24233007431030273, 0.24233007431030273, 0.24233007431030273, 0.24233007431030273, 0.24233007431030273, 0.24233007431030273]], ['HeadPitch', [-0.03685808181762695, -0.0353238582611084, -0.03685808181762695, -0.0353238582611084, -0.03685808181762695, -0.0353238582611084]], ['LShoulderPitch', [-0.2945699691772461, 0.1518239974975586, -0.16724801063537598, 0.30062198638916016, -0.20099592208862305, 1.0123980045318604]], ['LShoulderRoll', [0.15029001235961914, 0.17330002784729004, 0.2730100154876709, 0.27147603034973145, 0.23466014862060547, 0.30675792694091797]], ['LElbowYaw', [-1.3745059967041016, -1.3300199508666992, -1.3668360710144043, -1.2333779335021973, -1.2487177848815918, -0.6642639636993408]], ['LElbowRoll', [-1.3805580139160156, -1.3299360275268555, -1.478734016418457, -1.4910061359405518, -1.4910061359405518, -1.213352084159851]], ['LWristYaw', [-0.5231359004974365, -0.4771158695220947, -0.47251391410827637, -0.4218919277191162, -0.4249598979949951, 0.37578797340393066]], ['LHand', [0.3808000087738037, 0.3808000087738037, 0.38120001554489136, 0.38120001554489136, 0.3808000087738037, 0.38120001554489136]], ['RShoulderPitch', [1.0799779891967773, 1.0799779891967773, 1.0799779891967773, 1.0799779891967773, 1.0799779891967773, 1.0799779891967773]], ['RShoulderRoll', [-0.44950389862060547, -0.44950389862060547, -0.44950389862060547, -0.44950389862060547, -0.44950389862060547, -0.4510378837585449]], ['RElbowYaw', [0.6012859344482422, 0.6012859344482422, 0.6012859344482422, 0.6012859344482422, 0.6012859344482422, 0.6012859344482422]], ['RElbowRoll', [1.418992042541504, 1.4266619682312012, 1.415924072265625, 1.4174580574035645, 1.4097881317138672, 1.4281959533691406]], ['RWristYaw', [0.2438640594482422, 0.2438640594482422, 0.2438640594482422, 0.2438640594482422, 0.2438640594482422, 0.2438640594482422]], ['RHand', [0.3083999752998352, 0.3083999752998352, 0.3083999752998352, 0.3083999752998352, 0.3083999752998352, 0.3083999752998352]]]],
                        'right_out': [[angle] for  _, angle in [['LShoulderPitch', 0.9080860614776611], ['LShoulderRoll', 0.2438640594482422], ['LElbowYaw', -0.4556400775909424], ['LElbowRoll', -1.0752921104431152], ['RShoulderPitch', 0.6243798732757568], ['RShoulderRoll', -0.09208202362060547], ['RElbowYaw', 2.0248379707336426], ['RElbowRoll', 1.1704840660095215]]],
                        'right_over': [[angle] for  _, angle in [['LShoulderPitch', 0.9080860614776611], ['LShoulderRoll', 0.24539804458618164], ['LElbowYaw', -0.4556400775909424], ['LElbowRoll', -1.0768260955810547], ['RShoulderPitch', 0.5737578868865967], ['RShoulderRoll', -0.033789873123168945], ['RElbowYaw', 0.3282339572906494], ['RElbowRoll', 1.415924072265625]]],
                        'right_up':  [[angle] for  _, angle in [['LShoulderPitch', 0.9080860614776611], ['LShoulderRoll', 0.23926210403442383], ['LElbowYaw', -0.45717406272888184], ['LElbowRoll', -1.0722241401672363], ['RShoulderPitch', 0.8007900714874268], ['RShoulderRoll', 0.06592011451721191], ['RElbowYaw', 1.366752028465271], ['RElbowRoll', 1.4803519248962402]]],
                        'scratch head': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.3389720916748047, 0.3389720916748047, 0.34050607681274414, 0.34050607681274414, 0.2239220142364502, 0.13801813125610352]], ['HeadPitch', [0.43254613876342773, 0.43254613876342773, 0.43254613876342773, 0.4340801239013672, 0.43254613876342773, 0.1748340129852295]], ['LShoulderPitch', [-0.33138608932495117, -0.06753802299499512, -0.5047280788421631, -0.09821796417236328, -0.44336795806884766, 1.047680139541626]], ['LShoulderRoll', [0.47089600563049316, 0.2960200309753418, 0.41567206382751465, 0.2990880012512207, 0.289884090423584, 0.4033999443054199]], ['LElbowYaw', [-0.7793140411376953, -0.7915859222412109, -0.8253340721130371, -0.8253340721130371, -0.8682861328125, -0.561486005783081]], ['LElbowRoll', [-1.553900122642517, -1.5354920625686646, -1.5354920625686646, -1.5446960926055908, -1.5431621074676514, -1.3406740427017212]], ['LWristYaw', [-1.5033621788024902, -1.8255019187927246, -1.8147640228271484, -1.8147640228271484, -1.8147640228271484, -1.7549381256103516]], ['LHand', [0.765999972820282, 0.7663999795913696, 0.765999972820282, 0.765999972820282, 0.765999972820282, 0.7663999795913696]], ['RShoulderPitch', [0.925044059753418, 0.925044059753418, 0.925044059753418, 0.925044059753418, 0.925044059753418, 0.925044059753418]], ['RShoulderRoll', [-0.277695894241333, -0.2807638645172119, -0.27922987937927246, -0.27922987937927246, -0.27922987937927246, -0.28229808807373047]], ['RElbowYaw', [0.46782803535461426, 0.46782803535461426, 0.46782803535461426, 0.46782803535461426, 0.46782803535461426, 0.46782803535461426]], ['RElbowRoll', [1.132133960723877, 1.1474738121032715, 1.1398038864135742, 1.1413378715515137, 1.1398038864135742, 1.1444058418273926]], ['RWristYaw', [0.11961007118225098, 0.11961007118225098, 0.11961007118225098, 0.11961007118225098, 0.11961007118225098, 0.11961007118225098]], ['RHand', [0.46160000562667847, 0.4611999988555908, 0.46160000562667847, 0.4611999988555908, 0.4611999988555908, 0.4611999988555908]]]],
                        'shake fist': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.2009119987487793, 0.2009119987487793, 0.2009119987487793, 0.2009119987487793, 0.2009119987487793, 0.2009119987487793]], ['HeadPitch', [-0.04912996292114258, -0.047595977783203125, -0.04912996292114258, -0.04912996292114258, -0.04912996292114258, -0.047595977783203125]], ['LShoulderPitch', [0.03217196464538574, 0.09046411514282227, -0.0813438892364502, 0.07512402534484863, -0.16111207008361816, 0.8114440441131592]], ['LShoulderRoll', [0.18710613250732422, 0.20858192443847656, 0.2070479393005371, 0.25, 0.21778607368469238, 0.42180800437927246]], ['LElbowYaw', [-1.4113221168518066, -0.902033805847168, -1.2257080078125, -1.0094141960144043, -1.302408218383789, -0.17491793632507324]], ['LElbowRoll', [-1.4572581052780151, -0.5000419616699219, -1.463394045829773, -0.5107800960540771, -1.4894720315933228, -1.2762460708618164]], ['LWristYaw', [-0.36820197105407715, -0.3728039264678955, -0.3528618812561035, -0.357464075088501, -0.34212398529052734, -0.24701595306396484]], ['LHand', [0.3044000267982483, 0.3044000267982483, 0.3044000267982483, 0.3044000267982483, 0.3044000267982483, 0.3044000267982483]], ['RShoulderPitch', [0.9434518814086914, 0.9434518814086914, 0.9434518814086914, 0.9434518814086914, 0.9434518814086914, 0.9434518814086914]], ['RShoulderRoll', [-0.31911396980285645, -0.31911396980285645, -0.317579984664917, -0.317579984664917, -0.31911396980285645, -0.31911396980285645]], ['RElbowYaw', [0.4754979610443115, 0.4754979610443115, 0.4754979610443115, 0.4754979610443115, 0.4754979610443115, 0.4754979610443115]], ['RElbowRoll', [1.205766201019287, 1.205766201019287, 1.205766201019287, 1.205766201019287, 1.20269775390625, 1.20269775390625]], ['RWristYaw', [-0.05986785888671875, -0.05986785888671875, -0.0583338737487793, -0.05986785888671875, -0.0583338737487793, -0.0583338737487793]], ['RHand', [0.30879998207092285, 0.30879998207092285, 0.30879998207092285, 0.30879998207092285, 0.30879998207092285, 0.30879998207092285]]]],
                        'shake head no': [[0.6, -0.6]],
                        'shrug': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.08893013000488281, 0.08739614486694336, 0.08893013000488281]], ['HeadPitch', [0.26840806007385254, 0.12421202659606934, 0.12421202659606934]], ['LShoulderPitch', [-0.0031099319458007812, -0.02151799201965332, 0.8053081035614014]], ['LShoulderRoll', [0.5107800960540771, 0.40953612327575684, 0.13801813125610352]], ['LElbowYaw', [-2.1062240600585938, -1.7058501243591309, -0.3206479549407959]], ['LElbowRoll', [-1.155060052871704, -1.101370096206665, -0.8436579704284668]], ['LWristYaw', [-0.7609059810638428, -1.1796879768371582, -1.1029877662658691]], ['LHand', [0.7580000162124634, 0.7580000162124634, 0.7580000162124634]], ['RShoulderPitch', [-0.038308143615722656, 0.18872404098510742, 0.8621501922607422]], ['RShoulderRoll', [-0.2546858787536621, -0.22093796730041504, -0.21173405647277832]], ['RElbowYaw', [2.112276077270508, 2.0217700004577637, 0.41260409355163574]], ['RElbowRoll', [1.3008737564086914, 0.9097042083740234, 1.0247540473937988]], ['RWristYaw', [1.2394300699234009, 1.0983021259307861, 0.4524879455566406]], ['RHand', [0.7195999622344971, 0.7195999622344971, 0.7195999622344971]]]],
                        'spread arms': [angles_compressed for _, angles_compressed in [['HeadYaw', [-0.03072190284729004, -0.03072190284729004, 0.02603602409362793]], ['HeadPitch', [-0.042994022369384766, -0.042994022369384766, 0.10426998138427734]], ['LShoulderPitch', [0.3220980167388916, 0.3220980167388916, 0.8820080757141113]], ['LShoulderRoll', [1.104438066482544, 1.104438066482544, 0.10273599624633789]], ['LElbowYaw', [-2.1062240600585938, -2.1062240600585938, -0.6657979488372803]], ['LElbowRoll', [-0.30062198638916016, -0.30062198638916016, -0.8129780292510986]], ['LWristYaw', [-0.21633601188659668, -0.21633601188659668, -0.1733839511871338]], ['LHand', [0.6003999710083008, 0.6003999710083008, 0.6043999791145325]], ['RShoulderPitch', [0.20406389236450195, 0.20406389236450195, 0.8636841773986816]], ['RShoulderRoll', [-0.8391399383544922, -0.8176639080047607, -0.1503739356994629]], ['RElbowYaw', [1.010864019393921, 1.010864019393921, 0.46782803535461426]], ['RElbowRoll', [0.27922987937927246, 0.27922987937927246, 0.9173741340637207]], ['RWristYaw', [1.7257081270217896, 1.7257081270217896, 1.0200681686401367]], ['RHand', [0.5591999888420105, 0.5591999888420105, 0.5591999888420105]]]],                        
                        'turn head away': [angles_compressed for _, angles_compressed in [['HeadYaw', [-2.11696195602417]], ['HeadPitch', [0.07512402534484863]], ['LShoulderPitch', [0.8390560150146484]], ['LShoulderRoll', [0.12727999687194824]], ['LElbowYaw', [-0.39121198654174805]], ['LElbowRoll', [-0.8666679859161377]], ['LWristYaw', [0.38345813751220703]], ['LHand', [0.8320000171661377]], ['RShoulderPitch', [0.8191978931427002]], ['RShoulderRoll', [-0.04452800750732422]], ['RElbowYaw', [0.47856616973876953]], ['RElbowRoll', [0.7470998764038086]], ['RWristYaw', [-0.6397199630737305]], ['RHand', [0.5175999999046326]]]],
                        'wave hand': [angles_compressed for _, angles_compressed in [['HeadYaw', [0.0030260086059570312, 0.0030260086059570312, 0.0030260086059570312, 0.0030260086059570312, 0.0030260086059570312, 0.0030260086059570312]], ['HeadPitch', [-0.004643917083740234, -0.004643917083740234, -0.004643917083740234, -0.004643917083740234, -0.004643917083740234, -0.004643917083740234]], ['LShoulderPitch', [0.007627964019775391, 0.10733795166015625, 0.09966802597045898, 0.09660005569458008, 0.41874003410339355, 0.9157559871673584]], ['LShoulderRoll', [0.15949392318725586, 0.2852821350097656, 0.1349501609802246, 0.19170808792114258, 0.31442809104919434, 0.21625208854675293]], ['LElbowYaw', [-1.0400938987731934, -1.9114060401916504, -0.961860179901123, -1.8807258605957031, -0.6213119029998779, -0.507796049118042]], ['LElbowRoll', [-1.1151759624481201, -1.3406740427017212, -1.3391400575637817, -1.2869840860366821, -1.2378960847854614, -1.0507481098175049]], ['LWristYaw', [0.2039799690246582, 0.8835420608520508, 0.8129780292510986, 0.8467259407043457, 0.4862360954284668, -0.1304318904876709]], ['LHand', [0.6043999791145325, 0.6043999791145325, 0.6039999723434448, 0.6043999791145325, 0.6043999791145325, 0.6043999791145325]], ['RShoulderPitch', [0.8575479984283447, 0.8621501922607422, 0.8621501922607422, 0.8621501922607422, 0.8621501922607422, 0.8621501922607422]], ['RShoulderRoll', [-0.13810205459594727, -0.16264605522155762, -0.16418004035949707, -0.16418004035949707, -0.16264605522155762, -0.1595778465270996]], ['RElbowYaw', [0.47089600563049316, 0.4494199752807617, 0.4494199752807617, 0.4494199752807617, 0.4494199752807617, 0.4494199752807617]], ['RElbowRoll', [0.9066357612609863, 0.955723762512207, 0.955723762512207, 0.955723762512207, 0.955723762512207, 0.955723762512207]], ['RWristYaw', [1.047680139541626, -0.07674193382263184, -0.06753802299499512, -0.06600403785705566, -0.06447005271911621, -0.06293606758117676]], ['RHand', [0.5591999888420105, 0.5591999888420105, 0.5591999888420105, 0.5591999888420105, 0.5591999888420105, 0.5591999888420105]]]]        
                        }
        
        # sets of time points
        self.timepoints_other_hand = [[0.75], [1.5]]
        self.timepoints_dict = {
                                'facepalm': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [0.75, 2.5, 3.25]], ['HeadPitch', [0.75, 2.5, 3.25]], ['LShoulderPitch', [0.75, 2.5, 3.25]], ['LShoulderRoll', [0.75, 2.5, 3.25]], ['LElbowYaw', [0.75, 2.5, 3.25]], ['LElbowRoll', [0.75, 2.5, 3.25]], ['LWristYaw', [0.75, 2.5, 3.25]], ['LHand', [0.75, 2.5, 3.25]], ['RShoulderPitch', [0.75, 2.5, 3.25]], ['RShoulderRoll', [0.75, 2.5, 3.25]], ['RElbowYaw', [0.75, 2.5, 3.25]], ['RElbowRoll', [0.75, 2.5, 3.25]], ['RWristYaw', [0.75, 2.5, 3.25]], ['RHand', [0.75, 2.5, 3.25]]]],
                                'look upward': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.2, 2.2, 3.2]], ['HeadPitch', [1.2, 2.2, 3.2]], ['LShoulderPitch', [1.2, 2.2, 3.2]], ['LShoulderRoll', [1.2, 2.2, 3.2]], ['LElbowYaw', [1.2, 2.2, 3.2]], ['LElbowRoll', [1.2, 2.2, 3.2]], ['LWristYaw', [1.2, 2.2, 3.2]], ['LHand', [1.2, 2.2, 3.2]], ['RShoulderPitch', [1.2, 2.2, 3.2]], ['RShoulderRoll', [1.2, 2.2, 3.2]], ['RElbowYaw', [1.2, 2.2, 3.2]], ['RElbowRoll', [1.2, 2.2, 3.2]], ['RWristYaw', [1.2, 2.2, 3.2]], ['RHand', [1.2, 2.2, 3.2]]]],
                                'nod yes': [[0.67, 1.3]],
                                'point down': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.0, 2.0, 2.6]], ['HeadPitch', [1.0, 2.0, 2.6]], ['LShoulderPitch', [1.0, 2.0, 2.6]], ['LShoulderRoll', [1.0, 2.0, 2.6]], ['LElbowYaw', [1.0, 2.0, 2.6]], ['LElbowRoll', [1.0, 2.0, 2.6]], ['LWristYaw', [1.0, 2.0, 2.6]], ['LHand', [1.0, 2.0, 2.6]], ['RShoulderPitch', [1.0, 2.0, 2.6]], ['RShoulderRoll', [1.0, 2.0, 2.6]], ['RElbowYaw', [1.0, 2.0, 2.6]], ['RElbowRoll', [1.0, 2.0, 2.6]], ['RWristYaw', [1.0, 2.0, 2.6]], ['RHand', [1.0, 2.0, 2.6]]]],
                                'point forward': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.2, 2.2, 2.95]], ['HeadPitch', [1.2, 2.2, 2.95]], ['LShoulderPitch', [1.2, 2.2, 2.95]], ['LShoulderRoll', [1.2, 2.2, 2.95]], ['LElbowYaw', [1.2, 2.2, 2.95]], ['LElbowRoll', [1.2, 2.2, 2.95]], ['LWristYaw', [1.2, 2.2, 2.95]], ['LHand', [1.2, 2.2, 2.95]], ['RShoulderPitch', [1.2, 2.2, 2.95]], ['RShoulderRoll', [1.2, 2.2, 2.95]], ['RElbowYaw', [1.2, 2.2, 2.95]], ['RElbowRoll', [1.2, 2.2, 2.95]], ['RWristYaw', [1.2, 2.2, 2.95]], ['RHand', [1.2, 2.2, 2.95]]]],
                                'point to self': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.0, 2.0, 2.3, 2.9]], ['HeadPitch', [1.0, 2.0, 2.3, 2.9]], ['LShoulderPitch', [1.0, 2.0, 2.3, 2.9]], ['LShoulderRoll', [1.0, 2.0, 2.3, 2.9]], ['LElbowYaw', [1.0, 2.0, 2.3, 2.9]], ['LElbowRoll', [1.0, 2.0, 2.3, 2.9]], ['LWristYaw', [1.0, 2.0, 2.3, 2.9]], ['LHand', [1.0, 2.0, 2.3, 2.9]], ['RShoulderPitch', [1.0, 2.0, 2.3, 2.9]], ['RShoulderRoll', [1.0, 2.0, 2.3, 2.9]], ['RElbowYaw', [1.0, 2.0, 2.3, 2.9]], ['RElbowRoll', [1.0, 2.0, 2.3, 2.9]], ['RWristYaw', [1.0, 2.0, 2.3, 2.9]], ['RHand', [1.0, 2.0, 2.3, 2.9]]]],                 
                                'point up': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.4, 2.15, 3.3499999999999996]], ['HeadPitch', [1.4, 2.15, 3.3499999999999996]], ['LShoulderPitch', [1.4, 2.15, 3.3499999999999996]], ['LShoulderRoll', [1.4, 2.15, 3.3499999999999996]], ['LElbowYaw', [1.4, 2.15, 3.3499999999999996]], ['LElbowRoll', [1.4, 2.15, 3.3499999999999996]], ['LWristYaw', [1.4, 2.15, 3.3499999999999996]], ['LHand', [1.4, 2.15, 3.3499999999999996]], ['RShoulderPitch', [1.4, 2.15, 3.3499999999999996]], ['RShoulderRoll', [1.4, 2.15, 3.3499999999999996]], ['RElbowYaw', [1.4, 2.15, 3.3499999999999996]], ['RElbowRoll', [1.4, 2.15, 3.3499999999999996]], ['RWristYaw', [1.4, 2.15, 3.3499999999999996]], ['RHand', [1.4, 2.15, 3.3499999999999996]]]], 
                                'pump fist': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['HeadPitch', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['LShoulderPitch', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['LShoulderRoll', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['LElbowYaw', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['LElbowRoll', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['LWristYaw', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['LHand', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['RShoulderPitch', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['RShoulderRoll', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['RElbowYaw', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['RElbowRoll', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['RWristYaw', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]], ['RHand', [1.3, 1.6, 1.9000000000000001, 2.2, 2.5, 3.5]]]],
                                'scratch head': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['HeadPitch', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['LShoulderPitch', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['LShoulderRoll', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['LElbowYaw', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['LElbowRoll', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['LWristYaw', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['LHand', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['RShoulderPitch', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['RShoulderRoll', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['RElbowYaw', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['RElbowRoll', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['RWristYaw', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]], ['RHand', [1.0, 1.25, 1.5, 1.7, 1.95, 2.95]]]],
                                'shake fist': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['HeadPitch', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['LShoulderPitch', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['LShoulderRoll', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['LElbowYaw', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['LElbowRoll', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['LWristYaw', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['LHand', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['RShoulderPitch', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['RShoulderRoll', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['RElbowYaw', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['RElbowRoll', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['RWristYaw', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]], ['RHand', [1.0, 1.4, 1.7999999999999998, 2.1999999999999997, 2.5999999999999996, 3.5999999999999996]]]],                                
                                'shake head no': [[0.3, 0.7]],
                                'shrug': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.0, 1.75, 2.75]], ['HeadPitch', [1.0, 1.75, 2.75]], ['LShoulderPitch', [1.0, 1.75, 2.75]], ['LShoulderRoll', [1.0, 1.75, 2.75]], ['LElbowYaw', [1.0, 1.75, 2.75]], ['LElbowRoll', [1.0, 1.75, 2.75]], ['LWristYaw', [1.0, 1.75, 2.75]], ['LHand', [1.0, 1.75, 2.75]], ['RShoulderPitch', [1.0, 1.75, 2.75]], ['RShoulderRoll', [1.0, 1.75, 2.75]], ['RElbowYaw', [1.0, 1.75, 2.75]], ['RElbowRoll', [1.0, 1.75, 2.75]], ['RWristYaw', [1.0, 1.75, 2.75]], ['RHand', [1.0, 1.75, 2.75]]]],
                                'spread arms': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.2, 2.2, 3.4000000000000004]], ['HeadPitch', [1.2, 2.2, 3.4000000000000004]], ['LShoulderPitch', [1.2, 2.2, 3.4000000000000004]], ['LShoulderRoll', [1.2, 2.2, 3.4000000000000004]], ['LElbowYaw', [1.2, 2.2, 3.4000000000000004]], ['LElbowRoll', [1.2, 2.2, 3.4000000000000004]], ['LWristYaw', [1.2, 2.2, 3.4000000000000004]], ['LHand', [1.2, 2.2, 3.4000000000000004]], ['RShoulderPitch', [1.2, 2.2, 3.4000000000000004]], ['RShoulderRoll', [1.2, 2.2, 3.4000000000000004]], ['RElbowYaw', [1.2, 2.2, 3.4000000000000004]], ['RElbowRoll', [1.2, 2.2, 3.4000000000000004]], ['RWristYaw', [1.2, 2.2, 3.4000000000000004]], ['RHand', [1.2, 2.2, 3.4000000000000004]]]],
                                'turn head away': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [1.3]], ['HeadPitch', [1.3]], ['LShoulderPitch', [1.3]], ['LShoulderRoll', [1.3]], ['LElbowYaw', [1.3]], ['LElbowRoll', [1.3]], ['LWristYaw', [1.3]], ['LHand', [1.3]], ['RShoulderPitch', [1.3]], ['RShoulderRoll', [1.3]], ['RElbowYaw', [1.3]], ['RElbowRoll', [1.3]], ['RWristYaw', [1.3]], ['RHand', [1.3]]]],
                                'wave hand': [time_points_compressed for _, time_points_compressed in [['HeadYaw', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['HeadPitch', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['LShoulderPitch', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['LShoulderRoll', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['LElbowYaw', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['LElbowRoll', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['LWristYaw', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['LHand', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['RShoulderPitch', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['RShoulderRoll', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['RElbowYaw', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['RElbowRoll', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['RWristYaw', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]], ['RHand', [0.8, 1.2000000000000002, 1.6, 2.0, 2.6, 3.2]]]],
                                }


    def set_gesture_tags(self):
        # set special gesture tags
        # 1 = single, 2 = cyclical
        self.gesture_tags = {
                        "point forward": 1, 
                        "point to self": 1,
                        "point up": 1,
                        "point down": 1, 
                        "shake head no": 1, 
                        "nod yes": 1, 
                        "lower head": 1, 
                        "shake lowered head": 1, 
                        "pump fist": 1, 
                        "wave fist": 1, 
                        "wave hand": 1,
                        "spread arms": 1, 
                        "shrug": 1,
                        }
    
    ###  TEXT HANDLING

    def merge_short_segments(self, segments, max_words=5):
        merged = []
        i = 0
        while i < len(segments):
            segment = segments[i]
            word_count = len(segment.split())
            # Merge if 5 words or fewer and not the last segment
            if word_count <= max_words and i < len(segments) - 1:
                # Merge with next segment
                merged_segment = segment + ' ' + segments[i + 1]
                merged.append(merged_segment.strip())
                i += 2  # Skip next segment since it was merged
            else:
                merged.append(segment.strip())
                i += 1
        return merged

    def split_text(self, text):        

        # Split on periods or commas while preserving punctuation
        segments = re.findall(r'[^.;!?]+[.;!?]', text)

        # remove any leading/trailing whitespace
        segments = [segment.strip() for segment in segments]

        segments = self.merge_short_segments(segments)

        return segments 


    ### DURATION HANDLING   

    def estimate_duration_old(self, text):
        length = len(text)
        duration_est = round(length * self.character_duration, 2)

        return duration_est    
    
    def is_vowel(self, char):
        return char.lower() in 'aeiouy'

    def classify_syllable(self, syl):
        if syl and not self.is_vowel(syl[-1]):
            return 'long'
        else:
            return 'short'

    def split_into_syllables(self,segment):
        segment = segment.lower()
        vowels_pat = '[aeiou]'
        cons_pat = '[bcdfghjklmnpqrstvwxyz]'
        
        # Insert hyphen after each vowel
        segment = re.sub('({})'.format(vowels_pat), r'\1-', segment)
        
        # Remove trailing hyphen
        segment = re.sub(r'-$', '', segment)
        
        # Remove hyphen before final consonant
        segment = re.sub('-({})$'.format(cons_pat), r'\1', segment)
        
        # Fix certain consonant clusters (e.g., -nt to n-t)
        segment = re.sub(r'-(n|r|st)(t|n|d|f)', r'\1-\2', segment)
        
        # Fix s-clusters after vowels (e.g., as-t to as-t)
        segment = re.sub('({})-s([tpnml])'.format(vowels_pat), r'\1s-\2', segment)
        
        # Split into initial syllables
        syllables = segment.split('-')
        
        # Merge any vowelless fragments to the previous syllable
        merged = []
        for syl in syllables:
            if syl and re.search(vowels_pat, syl) is None:
                if merged:
                    merged[-1] += syl
                else:
                    merged.append(syl)
            else:
                merged.append(syl)
        
        return merged

    def analyze_segment(self, segment):
        syls = self.split_into_syllables(segment)
        types = [self.classify_syllable(s) for s in syls]
        return list(zip(syls, types))

    # To estimate duration for a segment (example weights; refine via testing)
    def estimate_duration(self, segment):

        """
        Use variable weights for puases 1
        """

        # Estimate total pause duration
        short_pauses = segment.count(" ")
        long_pauses = len(re.findall(r"[,:]", segment)) 
        total_pause_duration = self.short_pause_duration * short_pauses + self.long_pause_duration * long_pauses

        # Estimate total word duration
        analysis = self.analyze_segment(segment)
        total_word_duration = 0.0
        for _, typ in analysis:
            total_word_duration += self.short_weight if typ == 'short' else self.long_weight
        total_duration = total_pause_duration + total_word_duration
        return total_duration
    
    def estimate_durations(self, segments):

        """
        Apply the duration estimate to each text segment in a list.
        """

        durations_est = []
        for segment in segments:
            durations_est += [self.estimate_duration(segment)]
        durations_total_est = sum(durations_est)

        return durations_est, durations_total_est

    ### INTEGRATED SEGMENT HANDLING        

    def lstrip_punct_keep_bracket(s):
        """Remove leading punctuation/specials but preserve a leading '[' if present."""

        # Strip leading chars that are NOT letters, digits, or '['
        _LEADING_JUNK_EXCEPT_LBRACKET = re.compile(r'^[^A-Za-z0-9\[]+')

        if s is None:
            return ""
        return _LEADING_JUNK_EXCEPT_LBRACKET.sub('', s)

    def preprocess_segments(self, text):

        """
        Split text, calculate segment durations, assign gestures.
        Outputs list of lists, each of which contains 
        segment, gesture (None or tagged), gesture_type (random, single, cyclical), gesture duration estiamte
        """

        # Divide text into segments.
        segments_raw = self.split_text(text)
        print("segments: {}".format(segments_raw))

        segments_list = []
        for segment_raw in segment_raw:            

            # NAO will pronounce many segment-initial punctuation marks. This leaves only the tag marker [ at the start.
            segment = self.lstrip_punct_keep_bracket(segment_raw)

            # Simply turn segments with multiple tags into untagged segments, for now.
            if len(re.findall(r"\[.*?\]", segment)) > 1:
                segment = self.remove_tags(segment)

            # Identify tag, if present
            tag, gest_type = self.check_for_tags(segment)
            print("TAG: {}, gest_type: {}".format(tag, gest_type)) #666

            if tag == None:
                #Estimate segment durations
                duration_est = self.estimate_duration(segment)
                # Build list   
                segments_list += [[segment, tag, gest_type, duration_est]]
            else:
                # Isolate pre-/post- segments and tag
                subsegments = self.split_on_tags(segment)
                pretag_segment = subsegments[0]
                posttag_segment = subsegments[1]
                # Estimate segment durations
                pretag_seg_duration_est = self.estimate_duration(pretag_segment)
                posttag_seg_duration_est = self.estimate_duration(posttag_segment)
                # Build list
                segments_list += [[pretag_segment, "pretag", None, pretag_seg_duration_est]]
                segments_list += [[posttag_segment, tag, gest_type, posttag_seg_duration_est]]

        return segments_list

  
    ### TAGGED GESTURE HANDLING


    def check_for_tags(self, segment):
        """
        Check for gesture tags within a segment.
        Returns (gesture_name, gesture_type) if found, else (None, None).
        """

        text = segment.lower()
        pattern = r"\[([^\[\]]+)\]"   # capture tag content inside [ ]

        match = re.search(pattern, text)
        if match:
            tag = match.group(1).strip()  # e.g., "shake head"
            if tag in self.gesture_tags:
                gesture_type = self.gesture_tags[tag]
                return tag, gesture_type
            else:
                return None, "random"
        else:
            return None, "random"
    
    def remove_tags(self, segment):

        detagged = re.sub(r"\[.*?\]", '', segment)
        detagged_no_extra_space = " ".join(detagged.split())

        return detagged_no_extra_space    

    def split_on_tags(self, tagged_segment):
        """
        Split a text segment into parts before and after a gesture tag
        (marked by square brackets), and extract the tag text.

        Example:
        "I have the right [brings down fist] to a fair trial."
        → (["I have the right ", " to a fair trial."], "brings down fist")
        """

        pattern = r"\[(.*?)\]"  # match text inside [brackets]
        match = re.search(pattern, tagged_segment)

        if match:
            tag = match.group(1).strip()
            start, end = match.span()
            before = tagged_segment[:start]
            after = tagged_segment[end:]
            subsegments = [before, after]
        else:
            tag = None
            subsegments = [tagged_segment]

        return subsegments

    def get_cumulative_multiple(self, list, multiple):

        """Multiply a list ensuring continuity of cumulative values."""
        
        cumulative_long_list = []

        for i in range(multiple):
            for j in range(len(list)):
                if i == 0:
                    cumulative_long_list.append(list[j])
                else:
                    cumulative_long_list.append(cumulative_long_list[-1] + list[j])

        return cumulative_long_list
    
    def set_tagged_gest_cyclical(self, tag, posttag_seg_duration):

        # this is for cyclical gestures!!!
        # probably cycles should go to 3 no matter what and this function should be removed.

        joints = self.joints_dict[tag]
        
        timepoints_min = self.timepoints_dict[tag]
        timepoints_max = []
        print("timepoints_min: {}".format(timepoints_min))
        final_timepoint_min = timepoints_min[-1][-1]
        reps = int(posttag_seg_duration / final_timepoint_min)

        for i in timepoints_min:
            maxed = self.get_cumulative_multiple(i, reps)
            timepoints_max += [maxed]

        print('reps: {}'.format(reps))
        print("timepoints: {}".format(timepoints_max))

        angles_min = self.angles_dict[tag]
        angles_max = []
        for i in angles_min:
            maxed = i * reps
            angles_max += [maxed]
        print("angles: {}".format(angles_max))

        return joints, angles_max, timepoints_max

    def set_tagged_gest_single(self, tag, duration):

        """
        Set a single tagged gesture
        """      

        # Only load the gesture, if its duration does not exceed the duration of the speech segment estimate by more than 0.5s
        timepoints = self.timepoints_dict[tag]
        timepoint_max = max(max(sublist) for sublist in timepoints)
        if duration + 0.5 < timepoint_max:
            joints = []
            angles = []
            timepoints = []
        else:
            joints = self.joints_dict[tag] 
            angles = self.angles_dict[tag]

        return joints, angles, timepoints
    
    def execute_pretag_gest(self, segment, duration_est):
        # Sit if there is time, otherwise hold last posture.
        if duration_est > 1.5:
            self.robot.mm.sit_gently(post=True)
        self.robot.tts.say(segment)

    def execute_tagged_gest(self, posttag_segment, tag, gesture_type, duration_est):   

            """
            Split a tagged gesture into before and after.
            Identify its type and run.
            Consider moving the text processing to another function.
            """ 

            posttag_joints, posttag_angles, posttag_timepoints = [], [], []
            if gesture_type == 1:
                posttag_joints, posttag_angles, posttag_timepoints = self.set_tagged_gest_single(tag, duration_est)
                print("POSTTAG JOINTS: {}".format(posttag_joints))
                print("POSTTAG ANGLES: {}".format(posttag_angles))
                print("POSTTAG TIMEPOINTS: {}".format(posttag_timepoints))
            elif gesture_type == 2:
                posttag_joints, posttag_angles, posttag_timepoints = self.set_tagged_gest_cyclical(tag, duration_est)
            else:
                print('CUSTOM ERROR: key in gesture dictionary is neither 1 nor 2')
            
            # Execute posttag segment with speech
            self.robot.mm.use_motion_library(tag, post=True)
            #self.robot.motion.post.angleInterpolation(posttag_joints, posttag_angles, posttag_timepoints, True)
            self.robot.tts.say(posttag_segment)     

    ### RANDOM GESTURE HANDLING
    
    def set_angles_hand(self, reps_hand):
        yaws, hands = [], []
        yaw = hand = 0  # initialize to arbitrary values

        for i in range(reps_hand):
            if i % 2 == 1 or i == 0:
                yaw = random.uniform(-0.4, 0.4)
                hand = random.choice([0.1, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.6, 0.65, 0.7, 0.7, 0.8, 0.8, 0.9])

            yaws.append(yaw)
            hands.append(hand)

        return [yaws, hands]

    def set_angles_head(self, reps_head):
        yaws, pitches = [], []
        yaw = pitch = 0  # initialize to arbitrary values

        for i in range(reps_head):
            if i % 2 == 1 or i == 0:
                move = random.choice([True, False])
                if move:
                    yaw = random.uniform(-0.2, 0.2)
                    pitch = random.uniform(-0.1, 0.3)

            yaws.append(yaw)
            pitches.append(pitch)

        return [yaws, pitches]    

    def set_reps_hand(self, duration_est):
        reps_hand = round((duration_est - self.gest_duration_arm - 1)*1.25)
        return int(reps_hand)
    
    def set_reps_head(self, duration_est):
        print("delete: duration_est: {}".format(duration_est))
        reps_head = (duration_est - self.gest_duration_arm - 1)*2
        return int(reps_head)
    
    def set_gest_arm(self, side):

        gesture_arm = side + random.choice(['up', 'out', 'over'])

        return gesture_arm
    
    def set_gest_standard(self, duration):

        # Side
        side = self.set_side()            

        # Arms            
        gesture_arm = self.set_gest_arm(side)
        angles_arm = self.angles_dict[gesture_arm]
        timepoints_arm = [[self.gest_duration_arm]] * len(angles_arm)

        # Head
        reps_head = self.set_reps_head(duration)
        angles_head = self.set_angles_head(reps_head)
        timepoints_head = [[self.gest_duration_head * (i + 1) for i in range(reps_head)] for _ in range(2)]

        # Hands
        joints_hand, joints_other_hand = self.set_hand_joints(side)
        reps_hand = self.set_reps_hand(duration)
        angles_hand = self.set_angles_hand(reps_hand)
        timepoints_hand = [[round(self.gest_duration_hand * (i + 1), 2) for i in range(reps_hand)] for _ in range(2)]

        # Integrate joints, angles and time points into Torso lists

        joints_torso = self.joints_headarms + joints_hand + joints_other_hand
        print("joints_torso: {}".format(joints_torso))
        angles_torso = angles_arm + angles_head + angles_hand + self.angles_other_hand
        print(("angles_torso: {}".format(angles_torso)))           

        print("timepoints arm: {}".format(timepoints_arm))
        print("timepoints head: {}".format(timepoints_head))
        print("timepoints hand: {}".format(timepoints_hand))
        print("timepoints hand: {}".format(timepoints_hand))
        print("timepoints other hand: {}".format(self.timepoints_other_hand))
        print("timepoints other hand: {}".format(self.timepoints_other_hand))

        timepoints_torso = timepoints_arm + timepoints_head + timepoints_hand + self.timepoints_other_hand
        print('timepoints_torso', timepoints_torso)

        return joints_torso, angles_torso, timepoints_torso
    
    def execute_random_gests(self, segment, duration):

            joints, angles, timepoints = self.set_gest_standard(duration)

            # Execute posttag segment with speech
            self.robot.motion.post.angleInterpolation(joints, angles, timepoints, True)
            self.robot.tts.say(segment)   
    
    def set_hand_joints(self, side):

        if side == 'left_':
            joints = self.joints_lhand
            other_joints = self.joints_rhand
        elif side == 'right_':
            joints = self.joints_rhand
            other_joints = self.joints_lhand

        return joints, other_joints

    def set_side(self):

        side = random.choice(['left_', 'right_'])

        return side    

    ### MAIN FUNCTIONS ###

    def speak(self, text):
        """
        Speak via NAORobot TTS.
        """
        self.robot.tts.say(text)

    def speak_n_time(self, text):
        """
        Speak via NAORobot TTS, time duration, compare to estimated duration
        """
        # Divide text into sentence segments
        segments = self.split_text(text)
 
        #Estimate segment durations
        durations_est, duration_total_est = self.estimate_durations(segments) 
        print(segments)
        print(durations_est)  

        percentages = []
        for index, segment in enumerate(segments):
            print("index: {}".format(index))
            start = time.time()
            self.robot.tts.say(segment)
            end = time.time()
            duration = end - start
            duration_est = durations_est[index]
            difference = duration - duration_est
            print("Segment: {}".format(segment))
            print("Real Duration: {}".format(duration))
            print("Estimated Duration: {}".format(duration_est))
            print("Difference: {}".format(difference))
            print("Accuracy Percentage: {}".format(duration_est/duration))
            percentages += [duration_est/duration]
        summed = sum(percentages)
        mean_percentage = summed / len(percentages)
        print("MEAN ACCURACY PERCENTAGE: {}".format(mean_percentage))

    def speak_n_gest(self, text):

        """
        Speak via NAORobot TTS and simultaneously gesture.
        """       
        segments_list = self.preprocess_segments(text)

        for segment_list in segments_list:

            # segments list structure: [[segment, tag, gest_type, duration_est], [segment, tag, gest_type, duration_est], ...]
            # Speak and execute the appropriate gestures
            segment = segment_list[0]
            tag = segment_list[1]
            gesture_type = segment_list[2]
            duration_est = segment_list[3]

            print("SEGMENTS LIST: {}".format(segment_list))
            print("SEGMENT: {}".format(segment))
            print("TAG: {}".format(tag))
            print("GESTURE TYPE: {}".format(gesture_type))
            print("DURATION_EST: {}".format(duration_est))

            # Execute gentle sit on prettag segment, if there is time
            if tag == "pretag":
                pass
                self.execute_pretag_gest(segment, duration_est)
            # Execute tagged gesture on posttag segment
            elif tag is not None:
                self.execute_tagged_gest(segment, tag, gesture_type, duration_est)
            # Execute random gestures on full segment
            else:
                self.execute_random_gests(segment, duration_est)

        self.robot.mm.sit_gently()












